# [import any other necessary module(s)]

from datetime import datetime


class SalesFrame(ttk.Frame):
    '''Implement any necessary methods'''



    self.amount_entry=ttk.Entry(self, width=25, textvariable=self.amount, state=tk.DISABLE)
    self.amount_entry.grid(row=2,column=1, columnspan=2)

    ttk.Lable(self, text='ID:').grid(row=4, column=0, sticky=tk.E)
    self.id_entry=ttk.Entry(self, width=25, textvariable=self.id, state="readonly")
    self.id_entry.grid(row=4, column=1, columnspan=2)

    self.makeButtons()

    for child io self.winfo_children():
        child.grid_configure(padx=5, pady=5)
        
  def makeButtons(self):
    #Create a frame to store the buttons 
    buttonFrame=ttk.Frame(self)
    # Adf the button frame to the bottom row of the main grid
    buttonFrame.grid(row=5, column=0, colunmspan=4, sticky=tk.E)
    # add buttons t the button frame
    self.getAmount_button=tk.Button(buttonFrame, text="get Amount", command=self.getAmount)
    self.getAmount_button.grid(row=0, column=0, padx=5)
    self.clearField_button=ttk.Button(buttonFrame, text="clear Field", Command=self.clearField)
    self.clearField_button.grid(row=0, column=1)
    self.saveChanges_button=ttk.Button(buttonFrame, text="save changes", command=self.savechanges, state=tk.DISABLED)
 
 def getAmount(self):
     sales_Date=self.salesDate.get()
     region_code=self.region.get()
     if sales_date=='' or region_code=='':
        messagebox.showerror("Error", "Please enter date and region to get sales amount")
     else:
         #check if sales date is in the right format
         try:
             sales_date=datetime.striptime(sales_date, Sales.DATE_FORMAT).date()
         except ValueError:
             messagebox.showerror("Error", f"{sales_date} is not in a valid date format 'yyyy-mm-dd'")
          else:
              # check if region is one of right options
              regions=self.sqlitedbaccess.retrirve_regions()
              region_codes=[(region.code) for region in regions]
              if region_code not in region_codes:
                  messagebox.showerror("Error", f"{region_code} is ot one of the following region code: {region_code}")
              else: #check if there us sales by the date and region
                    self.sales=self.sqlitedbaccess.retrive_sales_by_date_region(sales_date, region_code)
                    if self.sales is None:
                    # clear id and amount field
                    se
 def clearF
  

def main():
    root = tk.Tk()
    root.title("Edit Sales Amount")
    SalesFrame(root)
    root.mainloop()


if __name__ == "__main__":
    main()
